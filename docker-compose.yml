#
# Simple setup of envoy-proxy with the recent global ratelimit plugin.
# This is based on:
# - envoyproxy/ratelimit
# - envoyproxy/envoy/examples/front-proxy
#
version: "3.7"
services:

  # This is the global reverse proxy in front of
  # - service1
  # - service2
  # Ratelimit headers are applied here.
  # This is the only exposed services. For the sake of simplicity
  # the TLS part has been removed, but you can get it from envoyproxy/envoy/examples/front-proxy
  front-envoy:
    build:
      context: .
      dockerfile: Dockerfile-frontenvoy
    volumes:
    - ./front-envoy.yaml:/etc/front-envoy.yaml
    networks:
      - envoymesh
    expose:
      - "8080"
      - "8001"
    ports:
      - "8080:8080"
      - "8001:8001"

  # A couple of flask services supporting
  # autoscaling thru docker.
  service1:
    build:
      context: .
      dockerfile: Dockerfile-service
    volumes:
      - ./service-envoy.yaml:/etc/service-envoy.yaml
    networks:
      envoymesh:
        aliases:
          - service1
    environment:
      - SERVICE_NAME=1
    expose:
      - "8000"

  service2:
    build:
      context: .
      dockerfile: Dockerfile-service
    volumes:
      - ./service-envoy.yaml:/etc/service-envoy.yaml
    networks:
      envoymesh:
        aliases:
          - service2
    environment:
      - SERVICE_NAME=2
    expose:
      - "8000"

  # Ratelimit data is stored here
  redis:
    image: redis:alpine
    expose:
      - 6379
    networks:
      - envoymesh

  #
  # This is the ratelimit service exposing gRPC
  # to avoid building it, as the latest docker image
  # was lagging, I just copied the binaries in the repo.
  ratelimit:
    image: alpine:3.6
    command: /usr/local/bin/ratelimit
    expose:
      - 8080
      - 8081
      - 6070
    ports:
      - 9090:8080
      - 6070:6070
    depends_on:
      - redis
    networks:
      - envoymesh
    volumes:
      - ./binary:/usr/local/bin/
      - ./examples:/data
    environment:
      - USE_STATSD=false
      - LOG_LEVEL=debug
      - REDIS_SOCKET_TYPE=tcp
      - REDIS_URL=redis:6379
      - RUNTIME_ROOT=/data
      - RUNTIME_SUBDIRECTORY=ratelimit

networks:
  envoymesh: {}
